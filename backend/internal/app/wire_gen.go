// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"cc.allio/fusion/config"
	"cc.allio/fusion/internal/apm"
	"cc.allio/fusion/internal/app/router"
	"cc.allio/fusion/internal/event"
	"cc.allio/fusion/internal/repo"
	"cc.allio/fusion/internal/svr"
	"cc.allio/fusion/pkg/mongodb"
	"context"
	"github.com/asaskevich/EventBus"
	"go.mongodb.org/mongo-driver/mongo"
)

// Injectors from wire.go:

func InitApp(ctx context.Context, cfg *config.Config) (*App, func(), error) {
	database, cleanup, err := mongodbConnect(cfg)
	if err != nil {
		return nil, nil, err
	}
	metaRepository := &repo.MetaRepository{
		Cfg: cfg,
		Db:  database,
	}
	viewerRepository := &repo.ViewerRepository{
		Cfg: cfg,
		Db:  database,
	}
	viewerService := &svr.ViewerService{
		Cfg:        cfg,
		ViewerRepo: viewerRepository,
	}
	visitRepository := &repo.VisitRepository{
		Cfg: cfg,
		Db:  database,
	}
	articleRepository := &repo.ArticleRepository{
		Cfg: cfg,
		Db:  database,
	}
	metaService := &svr.MetaService{
		Cfg:           cfg,
		MetaRepo:      metaRepository,
		ViewerService: viewerService,
		VisitRepo:     visitRepository,
		ArticleRepo:   articleRepository,
	}
	bus := NewEventBus()
	userRepository := &repo.UserRepository{
		Cfg: cfg,
		Db:  database,
	}
	userService := &svr.UserService{
		Cfg:            cfg,
		UserRepository: userRepository,
	}
	settingsRepository := &repo.SettingsRepository{
		Cfg: cfg,
		Db:  database,
	}
	settingService := &svr.SettingService{
		Cfg:         cfg,
		SettingRepo: settingsRepository,
	}
	tokenRepository := &repo.TokenRepository{
		Cfg: cfg,
		Db:  database,
	}
	tokenService := &svr.TokenService{
		Cfg:         cfg,
		SettingsSvr: settingService,
		TokenRepo:   tokenRepository,
	}
	logger := NewApmLogger(bus, cfg)
	logService := &svr.LogService{
		Cfg:    cfg,
		Logger: logger,
	}
	authService := &svr.AuthService{
		Cfg:          cfg,
		UserService:  userService,
		TokenService: tokenService,
		LogService:   logService,
		Logger:       logger,
	}
	categoryRepository := &repo.CategoryRepository{
		Cfg: cfg,
		Db:  database,
	}
	articleService := &svr.ArticleService{
		Cfg:          cfg,
		MetaService:  metaService,
		ArticleRepo:  articleRepository,
		CategoryRepo: categoryRepository,
	}
	visitService := &svr.VisitService{
		Cfg:            cfg,
		VisitRepo:      visitRepository,
		ArticleService: articleService,
	}
	categoryService := &svr.CategoryService{
		Cfg:          cfg,
		CategoryRepo: categoryRepository,
		ArticleSvr:   articleService,
	}
	tagService := &svr.TagService{
		Cfg:        cfg,
		ArticleSvr: articleService,
	}
	analysisService := &svr.AnalysisService{
		Cfg:         cfg,
		MetaSvr:     metaService,
		ArticleSvr:  articleService,
		ViewerSvr:   viewerService,
		VisitSvr:    visitService,
		TagSvr:      tagService,
		CategorySvr: categoryService,
	}
	draftRepository := &repo.DraftRepository{
		Cfg: cfg,
		Db:  database,
	}
	draftService := &svr.DraftService{
		Cfg:        cfg,
		DraftRepo:  draftRepository,
		ArticleSvr: articleService,
	}
	staticRepository := &repo.StaticRepository{
		Cfg: cfg,
		Db:  database,
	}
	fileService := &svr.FileService{
		Cfg:              cfg,
		StaticRepository: staticRepository,
		SettingService:   settingService,
	}
	staticService := &svr.StaticService{
		Cfg:         cfg,
		FileService: fileService,
		StaticRepo:  staticRepository,
	}
	svrSettingService := svr.SettingService{
		Cfg:         cfg,
		SettingRepo: settingsRepository,
	}
	caddyService := &svr.CaddyService{
		Cfg:             cfg,
		SettingsService: svrSettingService,
	}
	customPageRepository := &repo.CustomPageRepository{
		Cfg: cfg,
		Db:  database,
	}
	customPageService := &svr.CustomPageService{
		Cfg:                  cfg,
		CustomPageRepository: customPageRepository,
	}
	pipelineRepository := &repo.PipelineRepository{
		Cfg: cfg,
		Db:  database,
	}
	pipelineService := &svr.PipelineService{
		Cfg:                cfg,
		PipelineRepository: pipelineRepository,
	}
	service := &svr.Service{
		UserService:       userService,
		TokenService:      tokenService,
		AuthService:       authService,
		MetaService:       metaService,
		VisitService:      visitService,
		ViewerService:     viewerService,
		ArticleService:    articleService,
		CategoryService:   categoryService,
		TagService:        tagService,
		AnalysisService:   analysisService,
		DraftService:      draftService,
		SettingsService:   settingService,
		StaticService:     staticService,
		CaddyService:      caddyService,
		CustomPageService: customPageService,
		PipelineService:   pipelineService,
		FileService:       fileService,
		LogService:        logService,
	}
	isrEventBus := event.NewIsrEventBus(bus, service)
	aboutRoute := &router.AboutRoute{
		Cfg:     cfg,
		MetaSvr: metaService,
		Isr:     isrEventBus,
	}
	analysisRoute := &router.AnalysisRoute{
		Cfg:         cfg,
		AnalysisSvr: analysisService,
	}
	scriptEngine := event.NewScripEngine(pipelineService)
	articleRoute := &router.ArticleRoute{
		Cfg:        cfg,
		ArticleSvr: articleService,
		Isr:        isrEventBus,
		Script:     scriptEngine,
	}
	authRoute := &router.AuthRoute{
		Cfg:      cfg,
		AuthSvr:  authService,
		UserSvr:  userService,
		TokenSvr: tokenService,
		Script:   scriptEngine,
	}
	backupRoute := &router.BackupRoute{
		Cfg:         cfg,
		UserSvr:     userService,
		MetaSvr:     metaService,
		VisitSvr:    visitService,
		ViewerSvr:   viewerService,
		ArticleSvr:  articleService,
		CategorySvr: categoryService,
		TagSvr:      tagService,
		DraftSvr:    draftService,
		SettingSvr:  settingService,
		StaticSvr:   staticService,
	}
	userRoute := &router.UserRoute{
		Cfg:     cfg,
		UserSvr: userService,
	}
	caddyRoute := &router.CaddyRoute{
		Cfg:             cfg,
		SettingsService: settingService,
		CaddyService:    caddyService,
	}
	categoryRoute := &router.CategoryRoute{
		Cfg:             cfg,
		CategoryService: categoryService,
		Isr:             isrEventBus,
	}
	collaboratorRoute := &router.CollaboratorRoute{
		Cfg:          cfg,
		UserService:  userService,
		MetaService:  metaService,
		TokenService: tokenService,
	}
	customPageRoute := &router.CustomPageRoute{
		Cfg:           cfg,
		StaticService: staticService,
	}
	draftRoute := &router.DraftRoute{
		Cfg:          cfg,
		DraftService: draftService,
		Isr:          isrEventBus,
		Script:       scriptEngine,
	}
	linkRoute := &router.LinkRoute{
		Cfg:         cfg,
		MetaService: metaService,
	}
	menuRoute := &router.MenuRoute{
		Cfg:             cfg,
		SettingsService: settingService,
		Isr:             isrEventBus,
	}
	metaRoute := &router.MetaRoute{
		Cfg:         cfg,
		MetaService: metaService,
	}
	rewardRoute := &router.RewardRoute{
		Cfg:         cfg,
		MetaService: metaService,
	}
	settingRoute := &router.SettingRoute{
		Cfg:            cfg,
		SettingService: settingService,
		Isr:            isrEventBus,
	}
	siteRoute := &router.SiteRoute{
		Cfg:         cfg,
		MetaService: metaService,
		Isr:         isrEventBus,
		Script:      scriptEngine,
	}
	socialRoute := &router.SocialRoute{
		Cfg:         cfg,
		MetaService: metaService,
		Isr:         isrEventBus,
	}
	tagRoute := &router.TagRoute{
		Cfg:        cfg,
		TagService: tagService,
		Isr:        isrEventBus,
	}
	tokenRoute := &router.TokenRoute{
		Cfg:          cfg,
		TokenService: tokenService,
	}
	publicRoute := &router.PublicRoute{
		Cfg:               cfg,
		ArticleService:    articleService,
		TagService:        tagService,
		MetaService:       metaService,
		ViewerService:     viewerService,
		VisitService:      visitService,
		SettingService:    settingService,
		CustomPageService: customPageService,
		CategoryService:   categoryService,
	}
	pipelineRoute := &router.PipelineRoute{
		Cfg:             cfg,
		PipelineService: pipelineService,
		Script:          scriptEngine,
	}
	isrRoute := &router.IsrRoute{
		Cfg:            cfg,
		SettingService: settingService,
		Isr:            isrEventBus,
	}
	imgRoute := &router.ImgRoute{
		Cfg:            cfg,
		StaticService:  staticService,
		SettingService: settingService,
	}
	logRoute := &router.LogRoute{
		Cfg:        cfg,
		LogService: logService,
	}
	routerRouter := &router.Router{
		AboutRouter:        aboutRoute,
		AnalysisRouter:     analysisRoute,
		ArticleRouter:      articleRoute,
		AuthRouter:         authRoute,
		BackupRouter:       backupRoute,
		UserRouter:         userRoute,
		CaddyRouter:        caddyRoute,
		CategoryRouter:     categoryRoute,
		CollaboratorRouter: collaboratorRoute,
		CustomPageRouter:   customPageRoute,
		DraftRouter:        draftRoute,
		LinkRouter:         linkRoute,
		MenuRouter:         menuRoute,
		MetaRouter:         metaRoute,
		RewardRouter:       rewardRoute,
		SettingRouter:      settingRoute,
		SiteRouter:         siteRoute,
		SocialRouter:       socialRoute,
		TagRouter:          tagRoute,
		TokenRouter:        tokenRoute,
		PublicRouter:       publicRoute,
		PipelineRouter:     pipelineRoute,
		IsrRouter:          isrRoute,
		ImgRouter:          imgRoute,
		LogRoute:           logRoute,
	}
	repository := &repo.Repository{
		ArticleRepository:    articleRepository,
		CategoryRepository:   categoryRepository,
		DraftRepository:      draftRepository,
		MetaRepository:       metaRepository,
		SettingsRepository:   settingsRepository,
		StaticRepository:     staticRepository,
		TokenRepository:      tokenRepository,
		UserRepository:       userRepository,
		ViewerRepository:     viewerRepository,
		VisitRepository:      visitRepository,
		CustomPageRepository: customPageRepository,
		PipelineRepository:   pipelineRepository,
	}
	app := New(cfg, routerRouter, service, repository, database, isrEventBus, scriptEngine, logger)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func mongodbConnect(cfg *config.Config) (*mongo.Database, func(), error) {
	return mongodb.Connect(&cfg.Mongodb)
}

func NewEventBus() EventBus.Bus {
	return EventBus.New()
}

func NewApmLogger(bus EventBus.Bus, cfg *config.Config) *apm.Logger {
	logger := apm.NewLogger(bus, &cfg.Log.Apm)
	apm.Init(logger)
	return logger
}
